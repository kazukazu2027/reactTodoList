{"version":3,"sources":["components/AddArea.jsx","components/IncompleteArea.jsx","components/CompleteArea.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["AddArea","props","todoText","onChange","onClick","SAddArea","SInput","placeholder","value","type","styled","div","input","IncompleteArea","incompleteTodo","onClickComplete","onClickDelete","SIncompleteArea","map","todo","index","className","CompleteArea","completeTodo","SCompleteArea","App","useState","setIncompleteTodo","setCompleteTodo","setTodoText","SContainer","event","target","incompleteText","newIncomplete","splice","newComplete","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAceA,EAXC,SAACC,GAAW,IACjBC,EAAgCD,EAAhCC,SAAUC,EAAsBF,EAAtBE,SAAUC,EAAYH,EAAZG,QAE3B,OACI,eAACC,EAAD,WACI,cAACC,EAAD,CAAQC,YAAY,yBAAUC,MAAON,EAAUC,SAAUA,EAAUM,KAAK,SACxE,wBAAQL,QAASA,EAAjB,8BAONC,EAAWK,IAAOC,IAAV,+JASRL,EAASI,IAAOE,MAAV,qDCGGC,EAzBQ,SAACZ,GAAW,IACxBa,EAAkDb,EAAlDa,eAAgBC,EAAkCd,EAAlCc,gBAAiBC,EAAiBf,EAAjBe,cAExC,OACI,eAACC,EAAD,WACI,2EACA,8BACI,6BACKH,EAAeI,KAAI,SAACC,EAAMC,GAC3B,OACA,sBAAgBC,UAAU,OAA1B,UACI,6BAAKF,IACL,wBAAQf,QAAS,kBAAKW,EAAgBK,IAAtC,0BACA,wBAAQhB,QAAS,kBAAMY,EAAcI,IAArC,4BAHMD,cAiBxBF,EAAkBP,IAAOC,IAAV,+JCJNW,EAvBM,SAACrB,GAAW,IACtBsB,EAAyBtB,EAAzBsB,aAAcnB,EAAWH,EAAXG,QACrB,OACI,eAACoB,EAAD,WACI,+DACA,8BACI,6BACKD,EAAaL,KAAI,SAACC,EAAMC,GACzB,OACI,sBAAgBC,UAAU,OAA1B,UACA,6BAAKF,IACL,wBAAQf,QAAS,kBAAMA,EAAQgB,IAA/B,4BAFUD,cAgB5BK,EAAgBd,IAAOC,IAAV,+JC8BJc,MAnDf,WAAgB,IAAD,EAC+BC,mBAAS,IADxC,mBACNZ,EADM,KACUa,EADV,OAE2BD,mBAAS,IAFpC,mBAENH,EAFM,KAEQK,EAFR,OAGmBF,mBAAS,IAH5B,mBAGNxB,EAHM,KAGI2B,EAHJ,KAuCb,OACE,qBAAKR,UAAU,MAAf,SACE,eAACS,EAAD,WACE,4CACA,cAAC,EAAD,CAAS5B,SAAUA,EAAUC,SAtCd,SAAC4B,GACpBF,EAAYE,EAAMC,OAAOxB,QAqCgCJ,QAlCxC,WACjB,IAAM6B,EAAc,sBAAOnB,GAAP,CAAuBZ,IAC3CyB,EAAkBM,GAClBJ,EAAY,OAgCR,cAAC,EAAD,CAAgBf,eAAgBA,EAAgBC,gBAvB9B,SAACK,GACvB,IAAMc,EAAa,YAAOpB,GAC1BoB,EAAcC,OAAOf,EAAO,GAC5BO,EAAkBO,GAClB,IAAME,EAAW,sBAAOb,GAAP,CAAqBT,EAAeM,KACrDQ,EAAgBQ,IAkBsEpB,cA7BlE,SAACI,GACrB,IAAMc,EAAa,YAAOpB,GAC1BoB,EAAcC,OAAOf,EAAO,GAC5BO,EAAkBO,MA2Bd,cAAC,EAAD,CAAcX,aAAcA,EAAcnB,QAhB1B,SAACgB,GACrB,IAAMgB,EAAW,YAAOb,GACxBa,EAAYD,OAAOf,EAAM,GACzBQ,EAAgBQ,GAEhB,IAAMF,EAAa,sBAAOpB,GAAP,CAAuBS,EAAaH,KACvDO,EAAkBO,YAkBhBJ,EAAapB,IAAOC,IAAV,qFChDD0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5b471ef8.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst AddArea = (props) => {\r\n    const {todoText, onChange, onClick } = props;\r\n\r\n    return(\r\n        <SAddArea>\r\n            <SInput placeholder=\"TODOを入力\" value={todoText} onChange={onChange} type=\"text\" />\r\n            <button onClick={onClick}>追加</button>\r\n        </SAddArea>\r\n    )\r\n}\r\n\r\nexport default AddArea;\r\n\r\nconst SAddArea = styled.div`\r\n    background-color: #c1ffff;\r\n    width: 100%;\r\n    height: auto;\r\n    padding: 8px;\r\n    margin: 8px;\r\n    border-radius: 8px;\r\n`;\r\n\r\nconst SInput = styled.input`\r\n    margin-right: 15px;\r\n`;","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst IncompleteArea = (props) => {\r\n    const {incompleteTodo, onClickComplete, onClickDelete} = props;\r\n\r\n    return(\r\n        <SIncompleteArea>\r\n            <h2>これからやるTo Do</h2>\r\n            <div>\r\n                <ul>\r\n                    {incompleteTodo.map((todo, index) => {\r\n                    return(\r\n                    <div key={todo} className=\"list\">\r\n                        <li>{todo}</li>\r\n                        <button onClick={() =>onClickComplete(index)}>完了</button>\r\n                        <button onClick={() => onClickDelete(index)}>削除</button>\r\n                    </div>\r\n\r\n                    );\r\n                    })}\r\n    \r\n                </ul>\r\n            </div>\r\n        </SIncompleteArea>\r\n    )\r\n}\r\n\r\nexport default IncompleteArea;\r\n\r\nconst SIncompleteArea = styled.div`\r\n    background-color: #c6ffe2;\r\n    width: 100%;\r\n    height: auto;\r\n    padding: 8px;\r\n    margin: 8px;\r\n    border-radius: 8px;\r\n`;\r\n\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst CompleteArea = (props) => {\r\n    const {completeTodo, onClick} = props\r\n    return(\r\n        <SCompleteArea>\r\n            <h2>終わったTo Do</h2>\r\n            <div>\r\n                <ul>\r\n                    {completeTodo.map((todo, index) => {\r\n                    return(\r\n                        <div key={todo} className=\"list\">\r\n                        <li>{todo}</li>\r\n                        <button onClick={() => onClick(index)}>戻る</button>\r\n                        </div>\r\n\r\n                    );\r\n                    })}\r\n\r\n                </ul>\r\n            </div>\r\n        </SCompleteArea>\r\n    )\r\n}\r\n\r\nexport default CompleteArea;\r\n\r\nconst SCompleteArea = styled.div`\r\n    background-color: #ffffe0;\r\n    width: 100%;\r\n    height: auto;\r\n    padding: 8px;\r\n    margin: 8px;\r\n    border-radius: 8px;\r\n`;","import './App.css';\nimport React, { useState } from 'react'\nimport AddArea from './components/AddArea';\nimport IncompleteArea from './components/IncompleteArea';\nimport CompleteArea from './components/CompleteArea';\nimport styled from 'styled-components';\n\nfunction App() {\n  const [incompleteTodo, setIncompleteTodo] = useState([])\n  const [completeTodo, setCompleteTodo] = useState([])\n  const [todoText, setTodoText] = useState('')\n\n  const onChangeText = (event) => {\n    setTodoText(event.target.value)\n  }\n\n  const onClickAdd = () => {\n    const incompleteText = [...incompleteTodo, todoText]\n    setIncompleteTodo(incompleteText);\n    setTodoText('')\n  }\n\n  const onClickDelete = (index) => {\n    const newIncomplete = [...incompleteTodo]\n    newIncomplete.splice(index, 1);\n    setIncompleteTodo(newIncomplete);\n  }\n\n  const onClickComplete = (index) => {\n    const newIncomplete = [...incompleteTodo]\n    newIncomplete.splice(index, 1);\n    setIncompleteTodo(newIncomplete);\n    const newComplete = [...completeTodo, incompleteTodo[index]]\n    setCompleteTodo(newComplete);\n  } \n\n  const onClickReturn = (index) => {\n    const newComplete = [...completeTodo]\n    newComplete.splice(index,1);\n    setCompleteTodo(newComplete);\n\n    const newIncomplete = [...incompleteTodo, completeTodo[index]]\n    setIncompleteTodo(newIncomplete)\n  }\n\n\n  return (\n    <div className=\"App\">\n      <SContainer>\n        <h1>To Do List</h1>\n        <AddArea todoText={todoText} onChange={onChangeText} onClick={onClickAdd} />\n        <IncompleteArea incompleteTodo={incompleteTodo} onClickComplete={onClickComplete} onClickDelete={onClickDelete} />\n        <CompleteArea completeTodo={completeTodo} onClick={onClickReturn} />\n      </SContainer>\n    </div>\n  );\n}\n\nexport default App;\n\nconst SContainer = styled.div`\n  text-align: center;\n  width: 30%;\n  margin: 0 auto;\n`;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}